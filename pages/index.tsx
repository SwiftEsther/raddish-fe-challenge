import Head from 'next/head'
import '@rainbow-me/rainbowkit/styles.css';
import {
  getDefaultWallets,
  RainbowKitProvider,
  ConnectButton
} from '@rainbow-me/rainbowkit';
import { configureChains, createClient, goerli, WagmiConfig } from 'wagmi';
import { getAccount } from '@wagmi/core';
import { mainnet, localhost, polygon } from 'wagmi/chains';
import { alchemyProvider } from 'wagmi/providers/alchemy';
import { publicProvider } from 'wagmi/providers/public';
import { BigNumber } from 'ethers';
import { useEffect, useState } from 'react';
import { ChainId, ReserveDataHumanized, UiPoolDataProvider,WalletBalanceProvider } from '@aave/contract-helpers';
import { computeAPY, getProvider } from './utils/helpers';

const { chains, provider } = configureChains(
  [localhost, goerli, mainnet, polygon],
  [
    alchemyProvider({ apiKey: process.env.ALCHEMY_ID || '' }),
    publicProvider()
  ]
);

const { connectors } = getDefaultWallets({
  appName: 'Radish FE Challenge App',
  chains
});

const wagmiClient = createClient({
  autoConnect: true,
  connectors,
  provider
})

const account = getAccount();

const alcProvider = getProvider('matic'); // polygon is the same thing as matic

const uiPoolDataProviderAddress = '0x7006e5a16E449123a3F26920746d03337ff37340'.toLowerCase();
const poolAddressProvider = '0xa97684ead0e402dC232d5A977953DF7ECBaB3CDb'.toLowerCase();
const walletBalanceProviderAddress = '0xBc790382B3686abffE4be14A030A96aC6154023a'.toLowerCase();

const poolDataProviderContract = new UiPoolDataProvider({
  uiPoolDataProviderAddress,
  provider: alcProvider,
  chainId: ChainId.polygon
});

const walletBalanceProviderContract = new WalletBalanceProvider({
  walletBalanceProviderAddress,
  provider: alcProvider
});

export default function Home() {
  const [poolReserve, setPoolReserve] = useState<ReserveDataHumanized[]>([]);
  const [userBalances, setUserBalances] = useState<BigNumber[]>([])

  useEffect(() => {
    getReserve();
    getWalletBalances();
  }, []);

  const getReserve = async() => {
      await poolDataProviderContract.getReservesHumanized({lendingPoolAddressProvider: poolAddressProvider})
      .then((reserve => {
        setPoolReserve(reserve.reservesData);
      }))
      .catch((error) => console.log('Error loading reserve', error));
  }

  const getWalletBalances = async() => {
    const balances = await walletBalanceProviderContract.getUserWalletBalancesForLendingPoolProvider(`${account.address}`, poolAddressProvider);
    setUserBalances(balances[1]);
  }

  return (
    <WagmiConfig client={wagmiClient}>
      <RainbowKitProvider chains={chains} initialChain={mainnet}>
          <Head>
            <title>Radish Frontend Challenge</title>
            <meta name="description" content="Generated by create next app" />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <link rel="icon" href="/favicon.ico" />
          </Head>
          <div className='container mx-auto py-10'>
            <ConnectButton />
            <div className='rounded-lg w-1/2 mt-10'>
              <table className="table-auto">
                <thead className='border-b-2 border-b-black'>
                  <tr>
                    <th className='px-4 mb-4'>Assets</th>
                    <th className='px-4 mb-4'>Wallet Balance</th>
                    <th className='px-4 mb-4'>APY</th>
                    <th className='px-4 mb-4'></th>
                  </tr>
                </thead>
                <tbody>
                  {poolReserve.map((data, index) => 
                    <tr key={data.id} className='h-12'>
                      <td className='px-4'>{data.name}</td>
                      <td className='px-4'>{Number(userBalances[index] || 0)}</td>
                      <td className='px-4'>{computeAPY(data.liquidityRate).toFixed(2)}%</td>
                      <td className='px-4'>
                        <button className='bg-black text-white rounded-md py-2 px-4 disabled:opacity-50' disabled={Number(userBalances[index] || 0) <= 0}>Supply</button>
                      </td>
                    </tr>
                  )}
                </tbody>
              </table>
            </div>
          </div>
      </RainbowKitProvider>
    </WagmiConfig>
  )
}
